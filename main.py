import subprocess
import sys
import os
import schedule
import time
import datetime
import telebot
from flask import Flask, request, jsonify
import threading
from dotenv import load_dotenv
import signal
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
running = True
flask_app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start (–ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –∏–∑ parse_schedule.py)
@bot.message_handler(commands=['start'])
def start(message):
    try:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ú–ì–ö–¢–î–õ–ü. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.",
            parse_mode='Markdown'
        )
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

# Webhook-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Telegram
@flask_app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    try:
        logging.info(f"Webhook POST –ø–æ–ª—É—á–µ–Ω, content_type: {request.content_type}")
        if request.content_type == 'application/json':
            update = request.get_json()
            logging.info(f"JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {update}")
            bot.process_new_updates([telebot.types.Update.de_json(update)])
            logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return jsonify({'status': 'ok'})
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π content_type: {request.content_type}")
        return 'Bad Request', 400
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return 'Internal Server Error', 500

# –ü—Ä–æ—Å—Ç–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (Render –ø–∏–Ω–≥—É–µ—Ç –µ—ë)
@flask_app.route('/')
def index():
    return 'Telegram Bot is running! üöÄ'

def run_script(script_name):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç —Å –∑–∞—Ö–≤–∞—Ç–æ–º –≤—ã–≤–æ–¥–∞ –∏ —è–≤–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8.
    """
    logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ {script_name}...")
    if not os.path.exists(script_name):
        logging.error(f"–°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.getcwd()}")
        return False

    try:
        encoding = 'utf-8'
        result = subprocess.run(
            [sys.executable, script_name],
            check=True,
            capture_output=True,
            text=True,
            encoding=encoding,
            errors='replace',
            timeout=300  # –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
        )
        logging.info(f"–°–∫—Ä–∏–ø—Ç {script_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        if result.stdout.strip():
            logging.info("STDOUT:")
            logging.info(result.stdout)
        if result.stderr.strip():
            logging.warning("STDERR:")
            logging.warning(result.stderr)
        return True
    except UnicodeDecodeError as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ UTF-8 –¥–ª—è {script_name}: {e}. –ü—Ä–æ–±—É–µ–º cp1251...")
        try:
            result = subprocess.run(
                [sys.executable, script_name],
                check=True,
                capture_output=True,
                text=True,
                encoding='cp1251',
                errors='replace',
                timeout=300
            )
            logging.info(f"–°–∫—Ä–∏–ø—Ç {script_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω (cp1251)")
            if result.stdout.strip():
                logging.info("STDOUT:")
                logging.info(result.stdout)
            if result.stderr.strip():
                logging.warning("STDERR:")
                logging.warning(result.stderr)
            return True
        except subprocess.CalledProcessError as e2:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {script_name} (cp1251): {e2}")
            if e2.stdout:
                logging.error(f"STDOUT (–æ—à–∏–±–∫–∞): {e2.stdout}")
            if e2.stderr:
                logging.error(f"STDERR (–æ—à–∏–±–∫–∞): {e2.stderr}")
            return False
        except subprocess.TimeoutExpired as e2:
            logging.error(f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {script_name} (cp1251): {e2}")
            return False
    except subprocess.CalledProcessError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {script_name}: {e}")
        if e.stdout:
            logging.error(f"STDOUT (–æ—à–∏–±–∫–∞): {e.stdout}")
        if e.stderr:
            logging.error(f"STDERR (–æ—à–∏–±–∫–∞): {e.stderr}")
        return False
    except subprocess.TimeoutExpired as e:
        logging.error(f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {script_name}: {e}")
        return False

def run_scheduled_task():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç get_schedule.py –∏, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, extract_schedule.py –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    """
    if not running:
        return
    logging.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
    success = run_script('get_schedule.py')
    if success:
        logging.info("get_schedule.py –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º extract_schedule.py...")
        run_script('extract_schedule.py')
    else:
        logging.error("get_schedule.py –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, extract_schedule.py –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")

def run_all_scripts_at_startup():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    """
    scripts = ['get_schedule.py', 'extract_schedule.py', 'parse_schedule.py']
    success_count = 0
    for script in scripts:
        if run_script(script):
            success_count += 1
        else:
            logging.error(f"–°–∫—Ä–∏–ø—Ç {script} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    logging.info(f"–í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {success_count}/{len(scripts)} —É—Å–ø–µ—à–Ω–æ")

def run_schedule_in_background():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç schedule –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    schedule.every().day.at("20:00").do(run_scheduled_task)
    while running:
        schedule.run_pending()
        time.sleep(60)

def setup_webhook():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –≤ —Ñ–æ–Ω–µ.
    """
    render_hostname = os.getenv('RENDER_EXTERNAL_HOSTNAME')
    if render_hostname:
        bot.remove_webhook()
        webhook_url = f"https://{render_hostname}/{BOT_TOKEN}"
        logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
        try:
            bot.set_webhook(url=webhook_url)
            logging.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e} (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ webhook)")

def signal_handler(sig, frame):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown.
    """
    global running
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    running = False
    bot.remove_webhook()
    logging.info("Webhook —É–¥–∞–ª—ë–Ω")
    sys.exit(0)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä —Å—Ä–∞–∑—É, —Å–∫—Ä–∏–ø—Ç—ã –∏ schedule –≤ —Ñ–æ–Ω–µ.
    """
    logging.info("main.py –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
    logging.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logging.info(f"–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir()}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=run_all_scripts_at_startup, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º schedule –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=run_schedule_in_background, daemon=True).start()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=setup_webhook, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å—Ä–∞–∑—É
    port = int(os.getenv('PORT', 10000))  # Render default 10000
    logging.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ –ø–æ—Ä—Ç—É {port} (–¥–ª—è Render)")
    try:
        flask_app.run(host='0.0.0.0', port=port, debug=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Flask: {e}")

if __name__ == "__main__":
    main()
