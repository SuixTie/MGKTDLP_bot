import subprocess
import sys
import os
import schedule
import time
import telebot
from flask import Flask, request, jsonify
import threading
from dotenv import load_dotenv
import signal
import logging
import parse_schedule
import requests

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

running = True
flask_app = Flask(__name__)

bot = telebot.TeleBot(BOT_TOKEN)

parse_schedule.register_handlers(bot)
logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ parse_schedule –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

@flask_app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    try:
        if request.content_type == 'application/json':
            update = request.get_json()
            bot.process_new_updates([telebot.types.Update.de_json(update)])
            return jsonify({'status': 'ok'})
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π content_type: {request.content_type}")
        return 'Bad Request', 400
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return 'Internal Server Error', 500

@flask_app.route('/')
def index():
    return 'Telegram Bot is running! üöÄ'

def run_script(script_name):
    logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ {script_name}...")
    if not os.path.exists(script_name):
        logging.error(f"–°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.getcwd()}")
        return False
    try:
        result = subprocess.run(
            [sys.executable, script_name],
            check=True,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='replace',
            timeout=300
        )
        logging.info(f"–°–∫—Ä–∏–ø—Ç {script_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        if result.stdout.strip():
            logging.info("STDOUT:")
            logging.info(result.stdout)
        if result.stderr.strip():
            logging.warning("STDERR:")
            logging.warning(result.stderr)
        return True
    except subprocess.CalledProcessError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {script_name}: {e}")
        if e.stdout:
            logging.error(f"STDOUT (–æ—à–∏–±–∫–∞): {e.stdout}")
        if e.stderr:
            logging.error(f"STDERR (–æ—à–∏–±–∫–∞): {e.stderr}")
        return False
    except subprocess.TimeoutExpired as e:
        logging.error(f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {script_name}: {e}")
        return False

def run_all_scripts_at_startup():
    scripts = ['get_schedule.py', 'extract_schedule.py']
    success_count = 0
    for script in scripts:
        if run_script(script):
            success_count += 1
        else:
            logging.error(f"–°–∫—Ä–∏–ø—Ç {script} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    extracted_dir = "extracted_schedules"
    if os.path.exists(extracted_dir):
        files = os.listdir(extracted_dir)
        logging.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {extracted_dir}: {files}")
    else:
        logging.error(f"–ü–∞–ø–∫–∞ {extracted_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    logging.info(f"–í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {success_count}/{len(scripts)} —É—Å–ø–µ—à–Ω–æ")

def run_scheduled_task():
    if not running:
        return
    logging.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
    success = run_script('get_schedule.py')
    if success:
        logging.info("get_schedule.py –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º extract_schedule.py...")
        run_script('extract_schedule.py')
        extracted_dir = "extracted_schedules"
        if os.path.exists(extracted_dir):
            files = os.listdir(extracted_dir)
            logging.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {extracted_dir}: {files}")
        else:
            logging.error(f"–ü–∞–ø–∫–∞ {extracted_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        logging.error("get_schedule.py –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, extract_schedule.py –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")

def check_webhook():
    try:
        response = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo")
        data = response.json()
        if data['ok']:
            logging.info(f"Webhook info: {data['result']}")
            if data['result']['url']:
                logging.info(f"Webhook –∞–∫—Ç–∏–≤–µ–Ω: {data['result']['url']}")
            else:
                logging.warning("Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {data}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ getWebhookInfo: {e}")

def setup_webhook():
    render_hostname = os.getenv('RENDER_EXTERNAL_HOSTNAME')
    if render_hostname:
        bot.remove_webhook()
        webhook_url = f"https://{render_hostname}/{BOT_TOKEN}"
        logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
        try:
            bot.set_webhook(url=webhook_url)
            logging.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            check_webhook()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

def signal_handler(sig, frame):
    global running
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    running = False
    bot.remove_webhook()
    logging.info("Webhook —É–¥–∞–ª—ë–Ω")
    sys.exit(0)

def main():
    logging.info("main.py –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
    logging.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logging.info(f"–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir()}")

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    run_all_scripts_at_startup()
    threading.Thread(target=run_schedule_in_background, daemon=True).start()
    threading.Thread(target=setup_webhook, daemon=True).start()

    logging.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    port = int(os.getenv('PORT', 10000))
    logging.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ –ø–æ—Ä—Ç—É {port} (–¥–ª—è Render)")
    try:
        flask_app.run(host='0.0.0.0', port=port, debug=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Flask: {e}")

def run_schedule_in_background():
    schedule.every().day.at("06:00").do(run_scheduled_task)
    schedule.every().day.at("12:00").do(run_scheduled_task)
    schedule.every().day.at("18:00").do(run_scheduled_task)
    schedule.every().day.at("24:00").do(run_scheduled_task)
    while running:
        schedule.run_pending()
        time.sleep(60)

if __name__ == "__main__":
    main()
